
  cut命令

  用于从文件或者标准输入中读取内容并截取每一行的特定部分并送到标准输出。
截取的方式有三种，一是按照字符位置，二是按照字节位置，三是使用一个分隔符将一行分割成多个field，并提取指定的fields。

  cut命令有5个参数，其中-c,-b,-f分别表示"character", "byte"以及"field"截取方式。
当采用field模式截取时，需要用"-d"(divide分隔)参数指定一个分隔符，分割符只能为单个字符。
另外还有一个"- s"，suppress，表示如果行中没有给出的分割符则不输出该行（默认为如果没有分隔符则将该行原封不动输出）

以下为几个例子：

		  按字符截取：echo hello, world | cut -c 8-12 则输出"world"（截取字符串中从第8到第12个共12个字符） 
		按分隔符截取：echo hello, world | cut -f 2 -d " "则输出"world"（截取以空格分割的第二部分） 
		echo Long, long ago | cut -f 2,3 -d " "则输出" Long, ago"（截取以空格分割的第2、3部分，注意输出的结果也以-d指定的分隔符分割） 
		使用"-s"安静地忽略没有给出地分隔符地行：echo hello |cut -d "!" -f 1 -s则什么也不输出（因为行中没有"!"字符） 
		如果命令执行成功则返回0，遇到错误则返回一个大于0的数字。
		
		其中-c,-b,好理解，下面我自己理解的-f参数，自己多试验几次，多输出几次，就明白了。
		
		# echo Long,long ago,ddddddd | cut -f 2 -d ,
		long ago
		
		# echo Long,long ago,ddddddd | cut -f 2- -d ,
		long ago,ddddddd
		
		# echo Long,long ago,ddddddd,hhhhhhhhhhh | cut -f 2- -d ,
		long ago,ddddddd,hhhhhhhhhhh
		
		上面三个对比一下就会很清楚。
		
		# echo Long,long ago,ddddddd | cut -f 2,3 -d ,
		long ago,ddddddd
		# echo Long,long ago,ddddddd | cut -f 1,3 -d ,
		Long,ddddddd
		# echo Long,long ago,ddddddd | cut -f 1,2 -d ,
		Long,long ago
		
		
		# echo Long,long ago ddddddd | cut -f 2 -d ,
		long ago ddddddd
		
		# echo Long,long ago ddddddd | cut -f 2,3 -d ,
		long ago ddddddd
		
		


